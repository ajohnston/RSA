package gui;


import filehelper.FileHelper;
import filehelper.XMLHelper;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import rsa.RSAWrapper;

/**
 * <code>MainWindow</code> runs the main GUI events for the application
 * 
 * <br /><strong>TODO:</strong> Implement JFileChooser class for file encryption
 * and decryption, match events with RSA package code
 * @version 0.01
 * @author Andrew H. Johnston
 */
@SuppressWarnings("serial")
public class MainWindow extends javax.swing.JFrame {
    
    ArrayList<BigInteger> encryptedString = new ArrayList<>();
    static RSAWrapper encrypt = new RSAWrapper();
    final JFileChooser fc = new JFileChooser();
    FileNameExtensionFilter txtFilter = new FileNameExtensionFilter("Text Files", "txt");
    FileNameExtensionFilter rsaFilter = new FileNameExtensionFilter("RSA Files", "enc");
    FileNameExtensionFilter keyFilter  = new FileNameExtensionFilter("RSA Key Files", "xml");
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {     
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialogShowPrimes = new javax.swing.JDialog();
        primesDialog = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        dialogShowKeys = new javax.swing.JDialog();
        closeShowKeys = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        lblKeysDialog = new javax.swing.JTextArea();
        lblInput = new javax.swing.JLabel();
        buttonEncrypt = new javax.swing.JButton();
        buttonDecrypt = new javax.swing.JButton();
        buttonExit = new javax.swing.JButton();
        lblOutput = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        fieldInput = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        fieldOutput = new javax.swing.JTextArea();
        buttonClear = new javax.swing.JButton();
        buttonOpenFile = new javax.swing.JButton();
        buttonDecryptFile = new javax.swing.JButton();
        mainMenu = new javax.swing.JMenuBar();
        menuFileButton = new javax.swing.JMenu();
        menuImportKeys = new javax.swing.JMenuItem();
        menuExportKeys = new javax.swing.JMenuItem();
        menuQuit = new javax.swing.JMenuItem();
        menuSettingsButton = new javax.swing.JMenu();
        menuShowPrimes = new javax.swing.JMenuItem();
        menuShowKeys = new javax.swing.JMenuItem();

        primesDialog.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                primesDialogComponentShown(evt);
            }
        });

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dialogShowPrimesLayout = new javax.swing.GroupLayout(dialogShowPrimes.getContentPane());
        dialogShowPrimes.getContentPane().setLayout(dialogShowPrimesLayout);
        dialogShowPrimesLayout.setHorizontalGroup(
            dialogShowPrimesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogShowPrimesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dialogShowPrimesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(primesDialog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dialogShowPrimesLayout.createSequentialGroup()
                        .addGap(0, 333, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        dialogShowPrimesLayout.setVerticalGroup(
            dialogShowPrimesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogShowPrimesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(primesDialog, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1))
        );

        dialogShowKeys.setTitle("RSA Keys");
        dialogShowKeys.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                dialogShowKeysComponentShown(evt);
            }
        });

        closeShowKeys.setText("Close");
        closeShowKeys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeShowKeysActionPerformed(evt);
            }
        });

        lblKeysDialog.setColumns(20);
        lblKeysDialog.setRows(5);
        lblKeysDialog.setWrapStyleWord(true);
        jScrollPane3.setViewportView(lblKeysDialog);

        javax.swing.GroupLayout dialogShowKeysLayout = new javax.swing.GroupLayout(dialogShowKeys.getContentPane());
        dialogShowKeys.getContentPane().setLayout(dialogShowKeysLayout);
        dialogShowKeysLayout.setHorizontalGroup(
            dialogShowKeysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogShowKeysLayout.createSequentialGroup()
                .addContainerGap(331, Short.MAX_VALUE)
                .addComponent(closeShowKeys)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dialogShowKeysLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );
        dialogShowKeysLayout.setVerticalGroup(
            dialogShowKeysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dialogShowKeysLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(closeShowKeys)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblInput.setText("Input Text");

        buttonEncrypt.setText("Encrypt");
        buttonEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEncryptActionPerformed(evt);
            }
        });

        buttonDecrypt.setText("Decrypt");
        buttonDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDecryptActionPerformed(evt);
            }
        });

        buttonExit.setText("Exit");
        buttonExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonExitMouseClicked(evt);
            }
        });
        buttonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExitActionPerformed(evt);
            }
        });

        lblOutput.setText("Output Text");

        fieldInput.setColumns(20);
        fieldInput.setRows(5);
        jScrollPane1.setViewportView(fieldInput);

        fieldOutput.setColumns(20);
        fieldOutput.setRows(5);
        jScrollPane2.setViewportView(fieldOutput);

        buttonClear.setText("Clear Input + Output");
        buttonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearActionPerformed(evt);
            }
        });

        buttonOpenFile.setText("Encrypt File...");
        buttonOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOpenFileActionPerformed(evt);
            }
        });

        buttonDecryptFile.setText("Decrypt File...");
        buttonDecryptFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDecryptFileActionPerformed(evt);
            }
        });

        menuFileButton.setText("File");

        menuImportKeys.setText("Import Keys...");
        menuImportKeys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuImportKeysActionPerformed(evt);
            }
        });
        menuFileButton.add(menuImportKeys);

        menuExportKeys.setText("Export Keys...");
        menuExportKeys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExportKeysActionPerformed(evt);
            }
        });
        menuFileButton.add(menuExportKeys);

        menuQuit.setText("Quit");
        menuQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuQuitActionPerformed(evt);
            }
        });
        menuFileButton.add(menuQuit);

        mainMenu.add(menuFileButton);

        menuSettingsButton.setText("Settings");
        menuSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSettingsButtonActionPerformed(evt);
            }
        });

        menuShowPrimes.setText("Show P & Q");
        menuShowPrimes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuShowPrimesActionPerformed(evt);
            }
        });
        menuSettingsButton.add(menuShowPrimes);

        menuShowKeys.setText("Show Keys");
        menuShowKeys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuShowKeysActionPerformed(evt);
            }
        });
        menuSettingsButton.add(menuShowKeys);

        mainMenu.add(menuSettingsButton);

        setJMenuBar(mainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(buttonExit))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblInput)
                            .addComponent(lblOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonEncrypt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonDecrypt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonClear)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(buttonOpenFile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonDecryptFile)))
                        .addGap(0, 25, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblInput)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonEncrypt)
                    .addComponent(buttonDecrypt)
                    .addComponent(buttonClear)
                    .addComponent(buttonOpenFile)
                    .addComponent(buttonDecryptFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(lblOutput)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonExit)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonExitMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonExitMouseClicked

    private void buttonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_buttonExitActionPerformed

    private void primesDialogComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_primesDialogComponentShown

    }//GEN-LAST:event_primesDialogComponentShown

    private void buttonEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEncryptActionPerformed
        encryptedString.clear();
        fieldOutput.setLineWrap(true);
        String input = fieldInput.getText();
        BigInteger[] encrypted = encrypt.encrypt(input);
        String output = "";
        for (int i = 0; i < encrypted.length; i++) {
            //String concatenation seems to fail here
            output += new StringBuilder().append(encrypted[i].toString()).append("\n").toString();
            //Fill the ArrayList with the encrypted data
            encryptedString.add(encrypted[i]);
        }
        fieldOutput.setText(output);
    }//GEN-LAST:event_buttonEncryptActionPerformed

    private void buttonDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDecryptActionPerformed
        fieldInput.setLineWrap(true);
        BigInteger[] encrypted = new BigInteger[encryptedString.size()];
        String input = "";
        for (int i = 0; i < encryptedString.size(); i++) {
            encrypted[i] = encryptedString.get(i);
            input += encrypted[i];
        }
        String decrypted = encrypt.decrypt(encrypted);
        fieldInput.setText(input);
        fieldOutput.setText(decrypted);
    }//GEN-LAST:event_buttonDecryptActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dialogShowPrimes.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void closeShowKeysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeShowKeysActionPerformed
        dialogShowKeys.setVisible(false);
    }//GEN-LAST:event_closeShowKeysActionPerformed

    private void dialogShowKeysComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_dialogShowKeysComponentShown
        dialogShowKeys.setBounds(0, 0, 400, 330);
        lblKeysDialog.setLineWrap(true);
        BigInteger[] keys = encrypt.getKeys();
        String keysDialog;
        keysDialog  = "Public Key:\n("+ keys[0].toString() + ",\n" + keys[1].toString();
        keysDialog += "\nPrivate Key: \n("+ keys[0] +",\n"+ keys[2] +")\n";
        lblKeysDialog.setText(keysDialog);
    }//GEN-LAST:event_dialogShowKeysComponentShown

    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearActionPerformed
        fieldInput.setText("");
        fieldOutput.setText("");
        encryptedString.clear();
    }//GEN-LAST:event_buttonClearActionPerformed

    private void buttonOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOpenFileActionPerformed
        fc.setFileFilter(txtFilter);
        int returnVal = fc.showOpenDialog(MainWindow.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File openfile = fc.getSelectedFile();
            String message = FileHelper.readFile(openfile);
            BigInteger[] encrypted = encrypt.encrypt(message);
            String save = openfile.getAbsolutePath() + ".enc";
            FileHelper.writeEncryptedFile(encrypted, save);
            JOptionPane.showMessageDialog(null,"Saved to file " + save,"Saved File",JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_buttonOpenFileActionPerformed

    private void buttonDecryptFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDecryptFileActionPerformed
        fc.setFileFilter(rsaFilter);
        int returnVal = fc.showOpenDialog(MainWindow.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File openfile = fc.getSelectedFile();
            BigInteger[] encrypted = FileHelper.readFileToArray(openfile);
            String decrypted = encrypt.decrypt(encrypted);
            String save = openfile.getAbsolutePath();
            save = save.replace(".enc$", save);
            save = save + ".dec";
            FileHelper.writeEncryptedFile(encrypted, save);
            JOptionPane.showMessageDialog(null,"Saved to file " + save,"Saved File",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_buttonDecryptFileActionPerformed

    private void menuQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuQuitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menuQuitActionPerformed

    private void menuSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSettingsButtonActionPerformed

    }//GEN-LAST:event_menuSettingsButtonActionPerformed

    private void menuShowKeysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuShowKeysActionPerformed
        dialogShowKeys.setVisible(true);
    }//GEN-LAST:event_menuShowKeysActionPerformed

    private void menuExportKeysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExportKeysActionPerformed
        XMLHelper writer = new XMLHelper(encrypt);
        JFileChooser saveFileChooser = fc;
        saveFileChooser.setSelectedFile(new File("keys.xml"));
        int returnVal = saveFileChooser.showSaveDialog(MainWindow.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File saveFile = saveFileChooser.getSelectedFile();
            if (!saveFile.getAbsolutePath().endsWith(".xml")) {
                File newFile = new File(saveFile.getAbsolutePath() + ".xml");
                saveFile = newFile;
            }
            writer.writeXMLFile(saveFile);
            JOptionPane.showMessageDialog(null,"Exported to file " + saveFile.toString(),"Exported Keys",JOptionPane.WARNING_MESSAGE);
            return;
        }
        JOptionPane.showMessageDialog(null,"Failed to export keys! ","Export Key Failure",JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_menuExportKeysActionPerformed

    private void menuImportKeysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuImportKeysActionPerformed
        fc.setFileFilter(keyFilter);
        XMLHelper importer = new XMLHelper(encrypt);
        int returnVal = fc.showOpenDialog(MainWindow.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File keyFile = fc.getSelectedFile();
            importer.readXMLFile(keyFile);
            JOptionPane.showMessageDialog(null,"Imported Keys from File" + keyFile.toString(),"Imported Keys",JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_menuImportKeysActionPerformed

    private void menuShowPrimesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuShowPrimesActionPerformed
        dialogShowPrimes.setVisible(true);
        dialogShowPrimes.setBounds(0, 0, 100, 200);
        String seeds= "p=" + encrypt.getKeySeeds()[0].toString() + "<br />q=" + encrypt.getKeySeeds()[1].toString();
        primesDialog.setText(seeds);
    }//GEN-LAST:event_menuShowPrimesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>               
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
                //System.out.print(encrypt.getKeys()[0].toString().length());
                
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonClear;
    private javax.swing.JButton buttonDecrypt;
    private javax.swing.JButton buttonDecryptFile;
    private javax.swing.JButton buttonEncrypt;
    private javax.swing.JButton buttonExit;
    private javax.swing.JButton buttonOpenFile;
    private javax.swing.JButton closeShowKeys;
    private javax.swing.JDialog dialogShowKeys;
    private javax.swing.JDialog dialogShowPrimes;
    private javax.swing.JTextArea fieldInput;
    private javax.swing.JTextArea fieldOutput;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblInput;
    private javax.swing.JTextArea lblKeysDialog;
    private javax.swing.JLabel lblOutput;
    private javax.swing.JMenuBar mainMenu;
    private javax.swing.JMenuItem menuExportKeys;
    private javax.swing.JMenu menuFileButton;
    private javax.swing.JMenuItem menuImportKeys;
    private javax.swing.JMenuItem menuQuit;
    private javax.swing.JMenu menuSettingsButton;
    private javax.swing.JMenuItem menuShowKeys;
    private javax.swing.JMenuItem menuShowPrimes;
    private javax.swing.JLabel primesDialog;
    // End of variables declaration//GEN-END:variables
}
